// This file is basically notes of good queries that work well.
// SQL
user_input = 'show me all columns where food_type is burgers and city is alameda from generalinfo'
query = SELECT * FROM generalinfo WHERE food_type = 'burgers' AND city = 'alameda' ;

user_input = 'show me the 5 biggest street_num, filter to where city is san francisco and use the location table'
query = SELECT street_num, city FROM location WHERE city = 'san francisco' ORDER BY street_num DESC LIMIT 5.0;

user_input =  "How many restaurants have each review from generalinfo" 
query = SELECT review, COUNT(*) FROM generalinfo GROUP BY review;

user_input = 'show me average p_id, maximum p_id, minimum p_id, and count of all rows from person grouped by hasPosition'
query = SELECT hasPosition, MIN(p_id), MAX(p_id), AVG(p_id), COUNT(*) FROM person GROUP BY hasPosition;

user_input = 'show me the biggest 5 food types by average review of restaurants from each food_type in generalinfo rank them by AVG(review)'
query = SELECT food_type, AVG(review) FROM generalinfo GROUP BY food_type ORDER BY AVG(review) DESC LIMIT 5;

// MongoDB
user_input = 'Show me all of the columns and only 5 rows where hasPosition is equal to Faculty from UW_std_person'
pipeline = [{'$match': {'hasPosition': 'Faculty'}}, {'$project': {'_id': 0}}, {'$limit': 5}]

user_input = 'show me UW_std_person grouped by hasPosition'
pipeline = [{'$project': {'hasPosition': 1}}, {'$group': {'_id': '$hasPosition', 'sum': {'$sum': 1}}}]

user_input = 'show me average p_id, maximum p_id, minimum p_id, and count of all rows from UW_std_person grouped by hasPosition'
pipeline = [{'$project': {'p_id': 1, 'hasPosition': 1}}, {'$group': {'_id': '$hasPosition', 'min_p_id': {'$min': '$p_id'}, 'max_p_id': {'$max': '$p_id'}, 'avg_p_id': {'$avg': '$p_id'}, 'sum_1': {'$sum': 1}}}]

